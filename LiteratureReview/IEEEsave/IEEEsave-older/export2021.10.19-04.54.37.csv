"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Requirements Elicitation with and for Older Adults","H. Sustar; U. Pfeil; P. Zaphiris",City University London; City University London; City University London,"IEEE Software","25 Apr 2008","2008","25","3","16","17","The study investigated the strengths and weaknesses of existing user-centered design (UCD) methods for eliciting requirements from older adults. A case study in which older people are involved in designing, developing, and evaluating a virtual-garden prototype. Users could potentially employ this device (which has an interface that resembles a real garden) as an empathic information appliance that would provide weather forecasts and help control smart devices and assistive technologies. Creativity-oriented techniques are suggested to designers, developers, and engineers when creating products so that older people are included in the market consideration.","1937-4194","","10.1109/MS.2008.69","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4497756","older adults;empathic interfaces;user-centered design","Auditory system;User centered design;Weather forecasting;Demography;Design engineering;Usability;Animation;Capacitive sensors;Acoustical engineering;Power engineering and energy","geriatrics;home computing;product design;user centred design;user interfaces","user-centered design;older adults;user interface;smart devices;assistive technologies;creativity;product design","","2","","2","","25 Apr 2008","","","IEEE","IEEE Magazines"
"Is 40 the New 60? How Popular Media Portrays the Employability of Older Software Developers","S. Baltes; G. Park; A. Serebrenik","QAware Gmb, Germany; Software Engineering, Itility B.V.; Software Engineering, Eindhoven University of Technology, Eindhoven, The Netherlands","IEEE Software","23 Oct 2020","2020","37","6","26","31","We studied the public discourse around age and software development, focusing on the United States. This work was designed to build awareness among decision makers in software projects to help them anticipate and mitigate challenges that their older employees may face.","1937-4194","","10.1109/MS.2020.3014178","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9157881","","Software;Media;Computer hacking;Industries;Face;Engineering profession;Companies","decision making;organisational aspects;personnel;project management;software engineering","popular media portrays;employability;older software developers;software development;United States;software projects;older employees;decision making","","","","19","IEEE","4 Aug 2020","","","IEEE","IEEE Magazines"
"Testing tools combine best of new and old","R. M. Poston","PEI Div., Interactive Dev. Environ. Inc., Iselin, NJ, USA","IEEE Software","6 Aug 2002","1995","12","2","122","126","Today, new testing tools are giving life to old ones by providing reliable input to and automatically evaluating the output from old tools. Old and new tools are working together to cover the entire testing process. This article explains how old testing tools work with new ones in each phase of the life cycle.<<ETX>></ETX>","1937-4194","","10.1109/52.368294","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=368294","","Life testing;Automatic testing;System testing;Isolation technology;Content addressable storage;Jacobian matrices","program testing;software tools","program testing tools;new tools;old tools;testing process;software life cycle;software tools","","1","","","","6 Aug 2002","","","IEEE","IEEE Magazines"
"This old house [software development]","D. O'Day","Elite Inf. Syst., Los Angeles, CA, USA","IEEE Software","6 Aug 2002","1998","15","2","72","75","Comparing the improvement of existing software development processes to fixing up an old house, the author argues that working on one item at a time can be more practical than starting from the ground up. The author works at a software company that he imagines resembles many others. The company started out with five employees, including one programmer, and has grown to about 170 employees and $35 million a year in sales. Naturally the organization has experienced growing pains, and it is currently redefining what development means at the company. The article presents the author's view of the company's struggle to improve.","1937-4194","","10.1109/52.663789","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=663789","","Companies;Loans and mortgages;Fluid flow;Paints;Resists;Costs;Programming profession","software development management;DP industry;human resource management","software development processes;old house;software company","","1","","1","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Nine Things You Can Do with Old Software","G. Booch",IBM,"IEEE Software","19 Aug 2008","2008","25","5","93","94","Every new line of code quickly becomes legacy. When that legacy mounts, it forms a significantly massive pile of software, which cannot be ignored. This article discusses what we can do intentionally with such piles, from abandonment to evolution and many things in between.","1937-4194","","10.1109/MS.2008.139","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4602682","software architecture;software architecture economics;software development life cycle","Software maintenance;Costs;Power generation economics;Assembly;Software systems;Casting;Aging;Programming;Software measurement;Technological innovation","","","","","","","","19 Aug 2008","","","IEEE","IEEE Magazines"
"Open source software ERPs: a new alternative for an old need","N. Serrano; J. M. Sarriei","Univ. of Navarra, Spain; Univ. of Navarra, Spain","IEEE Software","8 May 2006","2006","23","3","94","97","Both OSS ERPs and proprietary ERPs involve complex system implementations that usually require modifications to a firm's business processes as well as some adaptation of the ERP' functionality. This mutual matching project usually involves consulting firms. However, the benefits of applying OSS are greater for ERPs than for other kinds of applications, for three main reasons: increased adaptability, decreased reliance on a single supplier, reduced costs","1937-4194","","10.1109/MS.2006.78","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1628946","ERP;enterprise resource planning;open source;management information systems","Open source software;Enterprise resource planning;Management information systems;Licenses;Companies;Costs;Application software;Dictionaries;Resource management;Information management","enterprise resource planning;public domain software","open source software;ERP;OSS;mutual matching project","","40","","6","","8 May 2006","","","IEEE","IEEE Magazines"
"Now That Objects are Old Hat, Quo Vadis, Oppsla?","A. Burgess",NA,"IEEE Software","6 Aug 2002","1996","13","1","106","","","1937-4194","","10.1109/MS.1996.476295","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=476295","","Sun;Corporate acquisitions;Prototypes;Bridges;Java;Web sites;Investments;Muscles;Protection;Object oriented modeling","","","","","","","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Sometimes the Old Ways Are Best","B. Kernighan",Princeton University,"IEEE Software","11 Nov 2008","2008","25","6","18","19","Brian Kernighan looks back at what has and has not changed in computing, programming, and tools over the last 30 years. He discusses what we want from our tools and reveals his favorites.","1937-4194","","10.1109/MS.2008.161","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4670705","software tool;software development tool;integrated development environment","Software tools;Programming profession;Forensics;Assembly;Computer hacking;Linux;Books;Java;Safety;Environmental management","","","","","","","","11 Nov 2008","","","IEEE","IEEE Magazines"
"Community Collaboration for ERP Implementation","H. Wu; L. Cao",Old Dominion University; Old Dominion University,"IEEE Software","16 Oct 2009","2009","26","6","48","55","The paper discusses the enterprise resource planning (ERP).ERP implementation solves business problems by customizing and integrating off-the-shelf enterprise software packages. A successful ERP implementation involves extensive collaboration and communication among the customer, implementation consultancy, and software vendor. Collaboration allows implementation personnel from different organizations to utilize each other's experiences. An example of this is the Web 2.0. A Web 2.0 knowledge repository system can reduce costs, improve quality, and lower the risks of ERP implementations.Through the case study, the key desired features for Web 2.0 knowledge repository system to support ERP implementations were defined. Epics was designed to fulfill these requirements and developed a prototype. Epics can be used by software vendors, ERP consulting firms, and ERP users. Human aspects play a critical role in ERP implementation. ERP implementation quality depends largely on how the implementation personnel's knowledge and past experiences are reused and communicated. Although knowledge reuse, collaboration, and communication are important for all software projects, they're particularly critical in ERP implementation owing to its unique challenges.","1937-4194","","10.1109/MS.2009.171","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5287009","Web 2.0;ERP implementation;software engineering;software implementation;packaged software;enterprise resource planning;ERP","Collaboration;Enterprise resource planning;Collaborative software;Personnel;Software packages;Costs;Software prototyping;Prototypes;Humans","data mining;enterprise resource planning;groupware;Internet;software reusability;software tools","ERP implementation;community collaboration;enterprise software packages;software vendor;Web 2.0 knowledge repository system;Epics software;ERP consulting firms;ERP users;knowledge reuse;communication","","13","1","12","","16 Oct 2009","","","IEEE","IEEE Magazines"
"Software lives too long","J. C. Munson","Dept. of Comput. Sci., Idaho Univ., Moscow, ID, USA","IEEE Software","6 Aug 2002","1998","15","4","18","","Old programs represent yesterday's technology. We have has learned quite a bit about software engineering methodology in the last few years. We now know, for example, that requirements traceability is central to program maintainability-if we don't know what a program is supposed to do we cannot maintain it. We know that calendar years have four digits in them, not two. We know that data can best be managed in databases. We know that many of the utility functions once written into programs are best handled by the operating system. And we have new design constructs and new programming language features that permit us to design eminently maintainable programs. When the cost of maintaining old buildings becomes excessive, we replace these buildings. We must do the same with old programs. Programs do not age well-written for hardware systems and operating systems that typically no longer exist many are fraught with undocumented patches and features. Just as we have learned that it is wise to invest in new hardware and new buildings, we must learn to recognize the value of replacing drafty and rickety old software.","1937-4194","","10.1109/52.687938","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=687938","","Automatic programming;Software maintenance;Application software;Computer languages;Magnetic heads;Operating systems;Buildings;Hardware;Software reliability;Aging","software maintenance","software engineering methodology;old programs;requirements traceability;program maintainability;utility functions;databases;operating systems;design constructs;programming language features;hardware systems","","","","","","6 Aug 2002","","","IEEE","IEEE Magazines"
"A fresh perspective on old problems [software industry]","R. Fleming","1331 Avalon St., Klamath Falls, OR, USA","IEEE Software","6 Aug 2002","1999","16","1","106","113","The author documents the lessons he learned while working as an intern at a growing telecommunications company. Though his conclusions are not surprising, they can serve as reminders of how common certain problems are in the software industry and how important basic practices can be. Initially he spent his time debugging, extending and updating the company's in-house billing/provisioning system, and dealt primarily with code, code-level quality, and program documentation issues. Soon, however, opportunities arose for him to contribute ideas that ultimately affected the entire department. These opportunities in turn provided him with valuable lessons about essential yet often overlooked software development issues, from programming practices to team organization.","1937-4194","","10.1109/52.744577","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=744577","","Programming profession;Debugging;Documentation;Productivity;Chaotic communication;Books;Communication effectiveness","DP industry;software engineering;telecommunication computing","telecommunications company;software industry;program debugging;system updating;billing system;provisioning system;software quality;program documentation;software development;programming practices;team organization","","2","","3","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Helix: The Architecture of the XMS Distributed File system","M. Fridrich; W. Older",BNR; NA,"IEEE Software","11 Sep 2006","1985","2","3","21","29","With abstraction layering and system decomposition, all the user sees is one homogeneous system. In actuality, the architecture is supporting 15 LANs and close to 1000 workstations.","1937-4194","","10.1109/MS.1985.230697","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1695332","","File systems;Computer architecture;Local area networks;Software architecture;Drives;Winches;File servers;Printers;Workstations;Buildings","","","","8","","6","","11 Sep 2006","","","IEEE","IEEE Magazines"
"Are Domain-Specific Models Easier to Maintain Than UML Models?","L. Cao; B. Ramesh; M. Rossi",Old Dominion University; Georgia State University; Helsinki School of Economics,"IEEE Software","19 Jun 2009","2009","26","4","19","21","Although domain-specific modeling (DSM) languages have been adopted in industries such as telecommunications and insurance, they haven't yet gained wide acceptance in practice. This is because the claims of increased productivity and ease of understanding haven't yet been verified by independent studies. To address this concern, we examined a DSM language's performance for maintenance tasks. Maintenance in software-intensive systems is critical because software often continuously evolves during development as well as after delivery, to meet users' ever-changing needs. So, maintenance performance significantly impacts software development productivity.Experimental results show that maintenance can be significantly easier and faster with a DSM language than with a general- purpose modeling language.","1937-4194","","10.1109/MS.2009.87","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5076454","visual programming;programming techniques;design notations and documentation;design representation;design maintainability;software distribution;software maintenance","Unified modeling language;Object oriented modeling;Industrial training;Productivity;Testing;System analysis and design;Domain specific languages;Mobile handsets;Performance evaluation;Error correction","software architecture;software maintenance;software performance evaluation;specification languages","domain-specific modeling language performance;software-intensive system maintenance;software development productivity;UML model","","9","","2","","19 Jun 2009","","","IEEE","IEEE Magazines"
"Agile Documentation, Anyone?","B. Selic",Malina Software Corp.,"IEEE Software","16 Oct 2009","2009","26","6","11","12","Software developers are notorious for skimping on design documentation, often eschewing it altogether. This trend has led to claims that it is merely an impediment in the fast-paced and highly pliable world of software development-a useless vestige of old-style engineering that should be eliminated altogether. While recognizing the unique nature of software, the author argues that, because of the complexity of modern software systems and the cryptic nature of current programming languages, good design documentation is not only useful but vital. However, we must seek ways of adapting it to suit the medium as well as the exceptionally dynamic development process.","1937-4194","","10.1109/MS.2009.167","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5287001","Documentation;Software engineering;Software maintenance","Documentation;Impedance;Software systems;Computer languages","software engineering;system documentation","agile documentation;software development;old-style engineering;modern software system complexity;programming languages;dynamic development process","","31","","2","","16 Oct 2009","","","IEEE","IEEE Magazines"
"Agile Requirements Engineering Practices: An Empirical Study","L. Cao; B. Ramesh",Old Dominion University; Georgia State University,"IEEE Software","7 Jan 2008","2008","25","1","60","67","An analysis of data from 16 software development organizations reveals seven agile RE practices, along with their benefits and challenges. The rapidly changing business environment in which most organizations operate is challenging traditional requirements-engineering (RE) approaches. Software development organizations often must deal with requirements that tend to evolve quickly and become obsolete even before project completion. Rapid changes in competitive threats, stakeholder preferences, development technology, and time-to-market pressures make prespecified requirements inappropriate.","1937-4194","","10.1109/MS.2008.1","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4420071","requirements engineering;agile software development","Data analysis;Programming;Quality management;Project management;Software development management;Software quality;Design engineering;Feedback;Protection;Urban areas","formal specification;software prototyping;systems analysis","agile iterative requirements engineering approach;business environment;software development organization;time-to-market pressure;requirement specification;empirical study","","179","","4","","7 Jan 2008","","","IEEE","IEEE Magazines"
"Are we developers liars or just fools [software managers]","R. N. Charette","PO Box 1929, Springfield, VA, USA","IEEE Software","6 Aug 2002","1995","12","4","90","92","Things were good in the old days. Very few people understood software, so those of us who were cognoscenti could get away with murder. We could explain away cost and schedule overruns by blaming ""complexity."" Performance problems were the fault of emerging technology and if management or customers got angry, what could they do? Although nearly everything that defined ""the old days"" has changed, the author argues that many of the old foibles remain. According to the author, software managers and the people who work for them risk being viewed as liars or fools, a perception that can only harm the software community.<<ETX>></ETX>","1937-4194","","10.1109/52.391841","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=391841","","Software development management;Project management;Costs;State estimation;Monitoring;Ethics;Books;Statistics;Observers;Uncertainty","software development management;personnel;social aspects of automation","software developers;software cost;software development schedule;complexity;software performance problems;software managers;software community","","","","","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Integrate End to End Early and Often","F. H. Bachmann; L. Carballo; J. McHale; R. L. Nord",Software Engineering Institute; Bursatec; Software Engineering Institute; Software Engineering Institute,"IEEE Software","26 Jun 2013","2013","30","4","9","14","This column is all about stories, and this one is as exciting as a paperback whodunit. The details are all included, and I hate to spoil it, but there's a happy ending. The story is about something old--designing and implementing a new system when the old one was really old (two decades!) and something new--using outside research consultants to save the day with a secret sauce. Enjoy!","1937-4194","","10.1109/MS.2013.77","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6547611","software architecture;software process;incremental iterative development;integration;architecture-centric engineering;team software process","Computer architecture;Software development;Aging;Software engineering;Prototypes;Software testing;Software quality","software architecture","end-to-end software integration;software development project;software architecture","","4","","5","","26 Jun 2013","","","IEEE","IEEE Magazines"
"A home-page overhaul using other Web sites","J. Nielsen","SunSoft, Mountain View, CA, USA","IEEE Software","6 Aug 2002","1995","12","3","75","78","The best prototype for designing a new user interface is your old user interface. The second best prototype is a competing product. Your competitors have invested significant resources in designing and implementing what they believe to be good user interfaces. You can glean much of what you need to create a new interface by examining products designed to solve similar problems. As with your own old user interface, you can analyze competing interfaces to see what works and what doesn't. You can also watch how users interact with competing products, and thus learn how they approach tasks. This, in essence, is competitive usability analysis. I recommend performing it very early in the usability engineering life-cycle-after you have visited the customer, gathered requirements, and defined the product vision, but before you design and prototype your new user interface.<<ETX>></ETX>","1937-4194","","10.1109/52.382190","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=382190","","Prototypes;User interfaces;Usability;Design engineering;Costs;Software prototyping;Web page design;Design optimization;Cloning;Product design","Internet;user interfaces;software prototyping;internetworking","World Wide Web home pages;user interface design;competing products;competitive usability analysis;usability engineering life-cycle;prototyping;WWW sites","","1","","","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Requirements Engineering's Next Top Model","O. Gotel; J. Cleland-Huang",NA; DePaul University,"IEEE Software","28 Oct 2013","2013","30","6","24","29","A game-show environment let a panel competitively explore the use of various requirements modeling techniques for specifying a complex problem. Although plain old text and rich pictures emerged as the winners, real-world problems are best modeled using a variety of techniques. The Web extra at http://youtu.be/6vfIwSauj5o is an audio podcast of author Jane Cleland-Huang providing an audio recording of her Requirements column, in which she discusses how a game-show environment at the 2013 European Software Engineering Conference let a panel competitively explore the use of various requirements modeling techniques for specifying a complex problem.","1937-4194","","10.1109/MS.2013.129","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6648608","requirements;modeling","Unified modeling language;Games;Computational modeling;Adaptation models;Software engineering","","","","","","1","","28 Oct 2013","","","IEEE","IEEE Magazines"
"Aim, fire [test-first coding]","K. Beck",NA,"IEEE Software","7 Aug 2002","2001","18","5","87","89","The author argues that test-first coding is not testing. Test-first coding is not new. It is nearly as old as programming. It is an analysis technique. We decide what we are programming and what we are not programming, and we decide what answers we expect. Test-first is also a design technique.","1937-4194","","10.1109/52.951502","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=951502","","Fires;Shape;Automatic testing;Software testing;Writing;Educational institutions;Logic testing;Viruses (medical);Fasteners;Quality control","systems analysis;program testing","test-first coding;program testing;programming;systems analysis;software design technique","","15","","","","7 Aug 2002","","","IEEE","IEEE Magazines"
"Interfaces for intermediates","L. L. Constantine","Constantine & Lockwood Ltd., Acton, MA, USA","IEEE Software","6 Aug 2002","1994","11","4","96","99","Intermediates (those who are neither beginners nor old hands, and who make up most of the user population) are perhaps the most neglected user segment in terms of interface design, yet there are possibly more intermediate users than beginners or experts. The author urges interface designers to take note of this segment and details a transitional interface well-suited for bridging the gap between novice and expert.<<ETX>></ETX>","1937-4194","","10.1109/52.300096","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=300096","","Usability;Computer architecture;Turning;User interfaces;Computer interfaces;Programming profession;Keyboards;Impedance;Leg;Rubber","user interfaces;human factors;interactive devices;software engineering","intermediate users;user population;user segment;user interface design;user interface optimization","","","","","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Law review: What's new? Tracing the origin of species","K. J. Dakin","5675 DTC Blvd., Englewood, CO, USA","IEEE Software","6 Aug 2002","1995","12","2","99","100","One common question asked at the outset of a software-development project is if it is okay to create the new program. The simple and easy legal answer is that the law does not prohibit the development of new software. The reason the law is so crystal clear on the issue of developing new software is that it presumes a theoretical situation called independent development, in which new software is presumed to; be based solely on any new concepts or code; contain no old concepts or code; and contain the thoughts of only the participants of the development team. Independently developed software must be 100 percent original. The paper considers how it does not survive long when applied to situations in the real world. There is no such thing as new software that is truly and entirely original.<<ETX>></ETX>","1937-4194","","10.1109/52.368274","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=368274","","Authorization;Licenses;Software quality;Loss measurement;Software measurement;Process design;Investments;Design methodology;Utility programs;Employment","software engineering;product liability;copyright","software-development project;legal answer;law;software development;independent development;development team;independently developed software;new software","","","","","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Guest Editors' Introduction: Dynamically Typed Languages","L. Tratt; R. Wuyts",Bournemouth University; IMEC,"IEEE Software","17 Sep 2007","2007","24","5","28","30","The languages discussed in this special issue have a long history, which is perhaps why some have had several different names over the years. One such language is Lisp, the second-oldest programming language. For years, many somewhat dismissively described languages such as Lisp as ""scripting languages."" Today, we more commonly refer to them as dynamically typed languages, typified by Python and Ruby, and their impact is arguably greater than ever. This issue highlights the practical uses of such languages and shows how they're frequently a vehicle for innovation in the development sphere. This article is part of a special issue on dynamically typed languages.","1937-4194","","10.1109/MS.2007.140","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4302683","dynamically typed languages;Lisp;Python;Ruby;Smalltalk;Lua;CLOS","Programming profession;Software reusability;Application software;History;Java;Testing;Safety devices;IEEE news;Runtime;Computer languages","","","","3","","","","17 Sep 2007","","","IEEE","IEEE Magazines"
"Test Optimization Using Software Virtualization","S. Seetharaman; B. V. S. Krishna Murthy",Alcatel; Alcatel,"IEEE Software","6 Sep 2006","2006","23","5","66","69","Virtualization of operating systems has recently become a hype, although the concept is very old. Virtualization lets us group resources logically and thus abstract from the dependencies that physical implementations create. For operating systems, virtualization lets us reduce resource constraints and expenses for a multitude of interacting hardware and operating systems. This is helpful in scenarios with many such dependencies, such as testing. This article briefly introduces virtualization from a tester's perspective. It summarizes experiences and compares different virtualization approaches: architectural, logical, and physical. Only the test itself remains a necessary reality","1937-4194","","10.1109/MS.2006.143","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1687863","software testing;virtual machines;open source","Software testing;Hardware;Virtual manufacturing;Platform virtualization;Operating systems;Voice mail;Personal communication networks;Test equipment;Resource virtualization;Virtual machining","operating systems (computers);optimisation;program testing;virtual machines","software test optimization;software virtualization;operating system","","10","","3","","6 Sep 2006","","","IEEE","IEEE Magazines"
"Point/Counterpoint","I. Alexander; K. Beck","Three Rivers Institute, OR; NA","IEEE Software","5 Mar 2007","2007","24","2","62","65","The key to successful systems is building what the stakeholders desire. In a way, this point can hardly be gain.said: nobody wants to build what the stakeholders don't desire. But as usual, the devil is in the details. this paper contrasts two examples to illustrate what it can mean to build what stakeholders desire. There's an old saying in software development that the users don't know what they want until you give them what they asked for. Experienced developers often smile ruefully when they hear this, having been told at least once in their careers that a system they had delivered was totally unacceptable when it was exactly (as far as they could tell) what was requested. There's more to delivering good software than following orders. The paper describes what positive role developers can play in discovering and exploring requirements","1937-4194","","10.1109/MS.2007.50","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4118652","requirements engineering;software development;agile methods","Discrete wavelet transforms;Engineering profession;Costs;Eyes;Lead;Programming","formal specification;software development management;systems analysis","software development;requirements engineering;DWTTY;stakeholders requirements","","","","","","5 Mar 2007","","","IEEE","IEEE Magazines"
"Client-server user-interface testing","D. F. Mosley","Client-Server Software Testing Technol., Frontenac, MO, USA","IEEE Software","6 Aug 2002","1995","12","1","124","127","As client-server applications continue to replace mainframe-based systems, developers are looking for ways to adapt testing procedures for graphical user interfaces. Some advocate starting from scratch with new approaches; others see ways to amend old techniques and supplement them with new ones.<<ETX>></ETX>","1937-4194","","10.1109/52.363159","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=363159","","Software testing;System testing;Graphical user interfaces;Application software;Software prototyping;Prototypes;Switches;Process control;Books;Software measurement","graphical user interfaces;program testing;client-server systems","user-interface testing;client-server applications;testing procedures;graphical user interfaces","","","1","4","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Next-Generation Architects for a Harsh Business World","W. A. Risi",KPMG Argentina,"IEEE Software","20 Feb 2012","2012","29","2","9","12","Walter Ariel Risi proposes some patterns for hiring productive people that remind me of research done in the early days of patterns by Jim Coplien, who found that hyperproductive teams included, in many cases, musicians! In the old days, companies often hired smart people from other disciplines because software engineering or computer science hadn't joined the academic production of certified, degreed contributors. With the current focus now on degrees, I wonder if we've lost something important.","1937-4194","","10.1109/MS.2012.37","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6155136","personnel;HR;architects;traditional;nontraditional","Career development;Personnel;Engineering profession;Computer science education;Research and development","personnel;recruitment;software engineering","next generation architects;harsh business world;productive people hiring;hyperproductive team;musicians;smart people hiring;software engineering;computer science;academic production;degreed contributor","","1","","","","20 Feb 2012","","","IEEE","IEEE Magazines"
"A tale of three programs","G. J. Holzmann",Nimble Research,"IEEE Software","15 May 2017","2017","34","3","23","26","A look at the generation of prime numbers offers a cautionary tale about the perils of premature optimization. We can code this in any reasonable programming language, and in quite a few unreasonable ones as well. It can be fun to express the algorithm in Python, C, C++, Scala, or Go, or even in scripting languages such as Tcl or Awk. And, yes, I confess that I've tried most of these, including Awk. Each language offers different features that can simplify the job or make it more interesting. For our current purpose, it'll suffice to stick to just plain old C.In a first attempt, we might come up with the version in Figure 1, which assumes that we provide the value of N in some other way-for example, with a macro directive to the C compiler.","1937-4194","","10.1109/MS.2017.62","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7927921","prime numbers;recursion;Sieve of Eratosthenes;software development;software engineering;programming;Robert Morris Sr.","Mathematics;Encoding","C language;program compilers","programming language;scripting languages;C language;C compiler","","","","1","","15 May 2017","","","IEEE","IEEE Magazines"
"Body Sensors: Wireless Access to Physiological Data","A. D. Jurik; A. C. Weaver",University of Virginia; University of Virginia,"IEEE Software","22 Dec 2008","2009","26","1","71","73","An area often neglected in software technology is where software meets biology. We'll approach this topic with one of the major interfaces between human beings and information technology: body sensors. These sensors mostly operate as interfaces to relatively small software components attached to or implanted into human bodies, such as pacemakers. They provide bidirectional communication interfaces between a person and a remote information system that provides healthcare services, diagnosis, or upgrades. The authors offer an overview of this rather old yet fast-evolving technology and show how to cope with design constraints.","1937-4194","","10.1109/MS.2009.5","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4721186","body sensors;wireless communication;embedded software","Wireless sensor networks;Wearable sensors;Biosensors;Humans;Circuits;Sensor phenomena and characterization;Energy management;Technology management;Voltage;Information technology","biomedical telemetry;biosensors;body area networks;health care;wireless sensor networks","body sensors;wireless access;physiological data;software technology;information technology;software components;pacemakers;bidirectional communication interfaces;remote information system;healthcare services;healthcare diagnosis;healthcare upgrades","","9","","","","22 Dec 2008","","","IEEE","IEEE Magazines"
"Git","D. Spinellis",Athens University of Economics and Business,"IEEE Software","20 Apr 2012","2012","29","3","100","101","Git is a distributed revision control system available on all mainstream development platforms through a free software license. An important difference of git over its older ancestors is that it elevates the software's revisions to first-class citizens. Developers care deeply about software revisions, and git supports this by giving each developer a complete private copy of the software repository and numerous ways to manage revisions within its context. The ability to associate a local repository with numerous remote ones allows developers and their managers to build a variety of interesting distributed workflows, most of which are impossible to run on a traditional centralized version control system. The local repository also makes git responsive, easy to setup, and able to operate without Internet connectivity. GitHub is a git repository hosting provider that simplifies many repository management tasks through a Web-based user interface while also promoting cooperation in open source projects.","1937-4194","","10.1109/MS.2012.61","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6188603","git;distributed version control;GitHub;configuration management","History;Control systems;Economics;Cloning;Kernel;Business","","","","11","","","","20 Apr 2012","","","IEEE","IEEE Magazines"
"Like a River","G. Booch",IBM,"IEEE Software","17 Apr 2009","2009","26","3","10","11","The metaphor of software development as building construction is an old one. Here is a fresh perspective, considering the life cycle of a software-intensive system as a river.","1937-4194","","10.1109/MS.2009.74","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4814951","life cycle;software-intensive systems","Rivers;Computer architecture;Societies;Reconnaissance;Solids;Sea surface;Marine animals;Lakes;Springs;Oceans","","","","","","","","17 Apr 2009","","","IEEE","IEEE Magazines"
"Software's invisible users","J. A. Whittaker","Dept. of Comput. Sci., Florida Tech., Melbourne, FL, USA","IEEE Software","7 Aug 2002","2001","18","3","84","88","Software is deterministic. Given a starting state and a fixed series of inputs, software will produce the exact same output every single time those inputs are applied. In fact, many of the technologies we apply during development (reviews, formal proofs, testing, and so forth) rely on this determinism; they would not work otherwise. But if software is deterministic, why do weird things happen? Why is it that we can apply a sequence of inputs and observe a failure and then be unable to reproduce that failure? Why does software work on one machine and fail on another? How is it that you can return from lunch and find your Web browser has crashed when it wasn't being used? The answer is, of course, that modern software processes an enormous number of inputs and only a small percentage of these inputs originate from human users. When testers can't reproduce failures, the reason is that they are only resubmitting the human input without sufficient regard to the operating system return codes and input from runtime libraries. When software fails on a new computer after running successfully on another, the reason can only be that the new system is supplying input that differs in content from the old one. And the browser that crashes when you are at lunch is responding to input from a nonhuman external resource.","1937-4194","","10.1109/52.922730","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=922730","","Application software;Kernel;Humans;Software tools;Software testing;Software systems;Event detection;Computer interfaces;Watches;Libraries","system recovery;operating systems (computers);software reliability","invisible software users;deterministic software;software failure;Web browser;input processing;human users;human input;operating system return codes;runtime libraries;nonhuman external resource","","17","","5","","7 Aug 2002","","","IEEE","IEEE Magazines"
"Where Have All the Stencils Gone?","C. Codephirst",consultant,"IEEE Software","19 Jun 2009","2009","26","4","91","92","Requirements analysts rarely use manual stencils nowadays. Technological advances mean that analysts can draw many types of diagrams. In this column, invited columnist Colin Codephirst asks whether this is progress, reflects on the advantages of old-style stencils, and muses on whether these stencils offered some advantages that have been forgotten. He outlines the requirements for a new stencil for analysts in the 21st century.","1937-4194","","10.1109/MS.2009.108","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5076466","requirements analysis;methods;stencils","Shape;Pediatrics;Dinosaurs;Educational institutions;Flowcharts;Resists;Software tools;Filters;Cultural differences;Global communication","diagrams;flowcharting","stencils;requirements analyst;technological advances","","","","","","19 Jun 2009","","","IEEE","IEEE Magazines"
"Requirements in the medical domain: Experiences and prescriptions","A. Tveito; P. Hasvold","iMed Norwegian Telemedicine, Norway; NA","IEEE Software","16 Dec 2002","2002","19","6","66","69","Research shows that information flow in health care systems is inefficient and prone to error. Data is lost, and physicians must repeat tests and examinations because the results are unavailable at the right place and time. Cases of erroneous medication - resulting from misinterpreted, misunderstood, or missing information - are well known and have caused serious health problems and even death. We strongly believe that through effective use of information technology, we can improve both the quality and efficiency of the health sector's work. Introducing a new system might shift power from old to young, from doctor to nurse, or from medical staff to administration. Few people appreciate loss of power, but even fewer will admit that the loss of power is why they resist the new system. Thus, we must work hard to bring this into the open and help people realize that a new system doesn't have to threaten their positions. Again, knowledge and understanding of a hospital's organizational structure, both official and hidden, is necessary if the system's introduction is to be successful.","1937-4194","","10.1109/MS.2002.1049394","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1049394","","Costs;Hospitals;Paramagnetic resonance;Europe;Investments;Biomedical engineering;Knowledge engineering;Contracts;Medical services;Particle measurements","medical computing;systems re-engineering;formal specification;formal verification","information flow;health care systems;erroneous medication;information technology;workload;productivity;bureaucracy;health care personnel;unconscious requirements;administration;understanding;knowledge;organizational structure","","4","","3","","16 Dec 2002","","","IEEE","IEEE Magazines"
"Y2K: don't play it again, Sam","J. Sanders",NA,"IEEE Software","6 Aug 2002","1998","15","3","100","102","Judging by how many Year 2000 press releases cross the author's desk each month, making software Y2K compliant is a booming business. Warnings of calamity mixed with promises of an easy fix-its the same old tune over and over again. How much faith would you have in the legal profession, for example, if legions of attorneys aggressively sought to take on cases that involved suing their fellow lawyers for malpractice? Yet this is uncomfortably like what many in our industry do today: bill clients to fix problems caused by other software developers. If we are ever to be taken seriously as a profession or engineering discipline, we must look past the Y2K hype and hysteria to determine how the problem emerged, why it emerged, and what we can do to avoid similar situations in the future.","1937-4194","","10.1109/52.676971","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=676971","","Glass;Databases;Application software;Companies;Computer industry;Time measurement;Costs;Read-write memory;Hard disks;Programming","software development management;software maintenance;professional aspects","Year 2000 press releases;Y2K compliant;software developers;engineering discipline;profession;Y2K hype","","1","","","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Rational Metaprogramming","D. Spinellis",Athens University of Economics and Business,"IEEE Software","7 Jan 2008","2008","25","1","78","79","Metaprogramming, using programs to manipulate other programs, is as old as programming. From self-modifying machine code in early computers to expressions involving partially applied functions in modern functional-programming languages, metaprogramming is an essential part of an advanced programmer's arsenal. Everyday metaprogramming involves on-the-fly code production. Representative examples include dynamically generated SQL statements and code created for evaluation at runtime in interpreted languages. Metaprogramming also occurs in programs that spew out HTML or XML. Although we can't classify these markup languages as code, their rich syntactic structure qualifies their generation as metaprogramming. Unfortunately, we commonly produce code on the fly by simply pasting together character strings. This means that it's difficult to verify essential properties of the generated code - such as validity, correctness, and safety - at compile time.","1937-4194","","10.1109/MS.2008.15","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4420074","metaprogramming;functional programming;templates;generative programming","Computer languages;Java;Libraries;DSL;Power generation;Instruments;Computer bugs;Production;Runtime;HTML","object-oriented programming;program compilers;program verification;software tools;SQL","rational metaprogramming;self-modifying machine code;functional-programming languages;SQL statements;HTML;XML;code generation;program verification","","2","","","","7 Jan 2008","","","IEEE","IEEE Magazines"
"Open Collaboration, Data Quality, and COVID-19","G. Hampson; N. Hargreaves; H. Jakubowicz; G. Williams; L. Hatton",NA; NA; NA; NA; NA,"IEEE Software","19 Apr 2021","2021","38","3","137","141","The flavor of this ""Impact"" department is somewhat different. In a pandemic, everybody has to come together. In April 2020, a call went out in the United Kingdom for groups to informally form and collaborate to study this brutal pathogen in whatever way they could. The five authors of this article, old friends from the geophysical industry with decades of experience in numerical modeling and big data, formed such a group.","1937-4194","","10.1109/MS.2021.3056642","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9407288","","Industries;Pathogens;Pandemics;Data integrity;Collaboration;Data models;Numerical models","Big Data;data integrity;diseases;epidemics;medical computing;microorganisms","data quality;COVID-19;United Kingdom;pathogen;geophysical industry;numerical modeling;Big Data;pandemic","","","","7","IEEE","19 Apr 2021","","","IEEE","IEEE Magazines"
"Managing requirements for business value","J. Favare",NA,"IEEE Software","7 Aug 2002","2002","19","2","15","17","Managing requirements for business value? What's there to manage? Aren't they just...there?"" Such perplexity was perfectly understandable in the good old days, when all you had to do was get the requirements from your customer, design your system, and produce one of those awful conformance matrices that demonstrated that you had implemented each and every one of the requirements in your system. Against this dreary backdrop of conformance matrices and the like, it is indeed hard to imagine a role for requirements in the development and execution of business strategy. But, as the song says, the times, they are a changin'. We are now looking outside the traditional boundaries and developing ways of getting maximum business value from our investment in requirements. This paper discusses three ways of realizing this value: managed requirements process, requirements agility, and contractual innovation.","1937-4194","","10.1109/52.991325","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=991325","","Investments;Disaster management;Design engineering;Innovation management;Technological innovation;Robustness;Humans;Costs;Financial management;Software development management","systems analysis;formal specification","requirements management;conformance matrices;managed requirements process;requirements agility;contractual innovation","","17","","4","","7 Aug 2002","","","IEEE","IEEE Magazines"
"Point/Counterpoint","J. Singer; M. Vigder; J. Segal; S. Clarke",National Research Council Canada; National Research Council Canada; Open University; Microsoft,"IEEE Software","25 Aug 2009","2009","26","5","54","57","Tools help end users develop software, but they're effective only when combined with a basic understanding of software engineering. Given this proliferation of new and old capabilities, how will end users exploit the programming possibilities available to them? Will tools to support end users be enough - or should everyone be taught some form of software engineering literacy? We believe we need a new literacy: not just reading, writing, and arithmetic, but the 3 Rs + SE. With such an education, end users will have greater success customizing environments and manipulating digital information correctly and thoughtfully.","1937-4194","","10.1109/MS.2009.135","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5222795","end-user programming;software engineering;version control;configuration management;software testing;debugging;software maintenance","Software engineering;Programming profession;Collaborative work;Collaborative tools;Application software;Collaborative software;Control systems;Engineering management;Software tools;Cellular phones","computer science education;programming;reverse engineering;software tools;teaching","end-user programming teaching;software engineering literacy;software tools;software development;software understanding;SE education;software environment customization;digital information manipulation;reading-writing-and-arithmetic;3 Rs","","","","","","25 Aug 2009","","","IEEE","IEEE Magazines"
"Crowd-Based Ambient Assisted Living to Monitor the Elderly’s Health Outdoors","A. C. Bicharra Garcia; A. S. Vivacqua; N. Sánchez-Pi; L. Martí; J. M. Molina",Federal University of the State of Rio de Janeiro; Federal University of Rio de Janeiro; Rio de Janeiro State University; Fluminense Federal University; Carlos III University of Madrid,"IEEE Software","13 Nov 2017","2017","34","6","53","57","The SafeNeighborhood approach combines data from multiple sources with collective intelligence. It merges mobile, ambient, and AI technologies with old-fashioned neighborhood ties to create safe outdoor spaces for the elderly. We're exploring AAL techniques in outdoor environments to increase the elderly's independence without them having to interact with technology. Current research in outdoor monitoring relies solely on sensor data.4 Our approach, which we call SafeNeigborhood (SN), crowdsources people in the neighborhood to revise the computer's inferences from contextual and sensor data. So, SN brings the community together to provide a safer environment for the elderly.","1937-4194","","10.1109/MS.2017.4121217","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8106875","human-centered computing;handicapped persons;special needs;healthcare;care for the elderly;ambient assisted living;SafeNeighborhood;software engineering;software development;context-aware and smart healthcare","Senior citizens;Monitoring;Temperature sensors;Global Positioning System;Mobile communication;Assisted living;Biomedical monitoring;Smart devices","ambient intelligence;artificial intelligence;assisted living;geriatrics;health care","computer inferences;outdoor monitoring;outdoor environments;AAL techniques;AI technologies;SafeNeighborhood approach;elderly health outdoor monitoring;crowd-based ambient assisted living","","5","","10","","13 Nov 2017","","","IEEE","IEEE Magazines"
"Examining the Rating System Used in Mobile-App Stores","I. J. Mojica Ruiz; M. Nagappan; B. Adams; T. Berger; S. Dienst; A. E. Hassan","McAfee; Rochester Institute of Technology; École Polytechnique de Montréal; University of Waterloo; University of Leipzig; Queen's University, Canada","IEEE Software","28 Oct 2016","2016","33","6","86","92","Unlike products on Amazon.com, mobile apps are continuously evolving, with new versions rapidly replacing the old ones. Nevertheless, many app stores still use an Amazon-style rating system, which aggregates every rating ever assigned to an app into one store rating. To examine whether the store rating captures the changing user satisfaction levels regarding new app versions, researchers mined the store ratings of more than 10,000 mobile apps in Google Play, every day for a year. Even though many apps' version ratings rose or fell, their store rating was resilient to fluctuations once they had gathered a substantial number of raters. The conclusion is that current store ratings aren't dynamic enough to capture changing user satisfaction levels. This resilience is a major problem that can discourage developers from improving app quality.","1937-4194","","10.1109/MS.2015.56","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7045413","mobile apps;Android;Google Play;review systems;rating;software development;software engineering","Mobile communication;Google;Androids;Humanoid robots;Computer applications;Software engineering","customer satisfaction;mobile computing","mobile-app stores;mobile applications;Amazon-style rating system;user satisfaction level;app versions;Google Play;app quality","","24","","10","IEEE","19 Feb 2015","","","IEEE","IEEE Magazines"
"Software process improvement in small organizations: a case study","K. C. Dangle; P. Larsen; M. Shaw; M. V. Zelkowitz","Fraunhofer Center for Exp. Software Eng., College Park, MD, USA; Fraunhofer Center for Exp. Software Eng., College Park, MD, USA; Fraunhofer Center for Exp. Software Eng., College Park, MD, USA; NA","IEEE Software","31 Oct 2005","2005","22","6","68","75","The Capability Maturity Model for software has become a major force in software development process improvement. We looked at the role of process improvement in the context of a small organization. Although the Capability Maturity Model integration is replacing the CMM, we focused on the older CMM. We had to look at more than which CMM key process areas apply to small businesses. Our overall goal was to institute good software development practices, we used the language of the CMM to gain the management's cooperation. Applying these practices is essential to managing growth, yet undertaking this effort without prior experience could impede a small company's innovative nature. This case study's purpose was to investigate the success factors of a software process improvement effort for a small software development organization.","1937-4194","","10.1109/MS.2005.162","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1524917","CMM;organizational culture;process improvement;small companies","Computer aided software engineering;Coordinate measuring machines;Project management;Quality management;Software quality;Area measurement;Capability maturity model;Software engineering;Programming;Management training","Capability Maturity Model;software development management;organisational aspects","software development process improvement;small organization;Capability Maturity Model;CMM key process area;software development organization","","42","","4","","31 Oct 2005","","","IEEE","IEEE Magazines"
"On-the-fly program modification: systems for dynamic updating","M. E. Segal; O. Frieder","Bellcore, Morristown, NJ, USA; NA","IEEE Software","6 Aug 2002","1993","10","2","53","65","Several dynamic software-based updating systems that are in the research and production stages are described. In particular, the procedure-oriented dynamic updating system (PODUS) is discussed. In PODUS, a program is updated by loading the new version of the program and replacing each old procedure with its corresponding new procedure during execution. Updating a procedure involves changing the binding from its current version to the new version. When all procedures have been replaced by their corresponding new versions, the program update is completed.<<ETX>></ETX>","1937-4194","","10.1109/52.199735","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=199735","","Computer bugs;Costs;Control systems;Space vehicles;Switching systems;Hardware","software maintenance","on-the-fly program modification;dynamic updating;dynamic software-based updating systems;procedure-oriented dynamic updating system","","88","30","10","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Reengineering a configuration-management system","O. Bray; M. M. Hess","Dept. of Inf. Technol., Sandia Nat. Labs., Albuquerque, NM, USA; Dept. of Inf. Technol., Sandia Nat. Labs., Albuquerque, NM, USA","IEEE Software","6 Aug 2002","1995","12","1","55","63","Developers at Sandia successfully reengineered a 30-year-old system, whose source code and documentation was incomplete, into a client-server application. Their strategy was to use natural-language information modeling to understand what the system did and then rely on domain and business-process experts to define functions at the procedural level.<<ETX>></ETX>","1937-4194","","10.1109/52.363165","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=363165","","Application software;Documentation;Data engineering;Databases;Engineering drawings;Network servers;Business process re-engineering;Laboratories;Energy management;Engineering management","systems re-engineering;configuration management;project management;software development management;system documentation","configuration-management system reengineering;source code;documentation;client-server application;natural-language information modeling;business-process experts","","3","","3","","6 Aug 2002","","","IEEE","IEEE Magazines"
"A linguistic-engineering approach to large-scale requirements management","J. Natt och Dag; B. Regnell; V. Gervasi; S. Brinkkemper","Dept. of Commun. Syst., Lund Univ., Sweden; Dept. of Commun. Syst., Lund Univ., Sweden; NA; NA","IEEE Software","10 Jan 2005","2005","22","1","32","39","For large software companies, the sheer number of textual requirements presents specific challenges. To find market opportunities, organizations must continuously elicit new requirements and reevaluate old ones as market needs evolve. Developing large, complex software products aimed at broad markets involves identifying and maintaining the link between product requirements and the massive inflow of customers' wishes. Automating this support through linguistic engineering could save considerable time and improve software quality.","1937-4194","","10.1109/MS.2005.1","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1377120","requirements engineering;large-scale requirements management;natural language processing;linguistic engineering;requirement relationships;requirements similarity;requirement duplicates;redundancy","Large-scale systems;Maintenance engineering;Computer architecture;Software maintenance;Software quality;Decision making;Information analysis;Couplings;Software architecture;Financial management","knowledge management;customer relationship management;computational linguistics;DP industry;natural languages;formal specification;software quality","software companies;software product;software quality;linguistic-engineering approach;large-scale requirements engineering management;natural language;customer communication","","64","","8","","10 Jan 2005","","","IEEE","IEEE Magazines"
"Is Your Upgrade Worth It? Process Mining Can Tell","M. van Genuchten; R. Mans; H. Reijers; D. Wismeijer","VitalHealth Software, Ede; Eindhoven University of Technology, Eindhoven; Eindhoven University of Technology, Eindhoven; ACTA, Amsterdam","IEEE Software","15 Sep 2014","2014","31","5","94","100","Software vendors typically release updates and upgrades of their software once or twice a year. Users are then faced with the question of whether the upgrade is worth the price and the trouble. The software industry doesn't provide much evidence that it's worthwhile to upgrade to new releases. The authors propose the use of process mining to prove that upgrading to the next release provides quantifiable benefits to the end user. Process mining capitalizes on the fact that event logs capture information about processes. These events can be used to make processes visible and show the benefits of using a software product's next release. Three groups benefits from this process: end users, software suppliers, and researchers. The authors applied process mining to a medical software product and captured empirical data from 1,400 cases. The data shows that the new version was 11 percent more efficient than the old release.","1937-4194","","10.1109/MS.2014.20","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6728931","usability;process mining;product metrics","Usability;Data mining;Software measurements","data mining;software maintenance","process mining;software vendors;software updates;software upgrades;software industry;event logs;software product release;medical software product;empirical data","","6","","15","IEEE","30 Jan 2014","","","IEEE","IEEE Magazines"
"Prospects for an engineering discipline of software","M. Shaw","Dept. of Comput. Sci., Carnegie Mellon Univ., Pittsburgh, PA, USA","IEEE Software","6 Aug 2002","1990","7","6","15","24","Although software engineering is not yet a true engineering discipline, it has the potential to become one. Older engineering fields are examined to ascertain the character that software engineering might have. The current state of software technology is discussed, covering information processing as an economic force, the growing role of software in critical applications, the maturity of development techniques, and the scientific basis for software engineering practice. Five basic steps that the software engineering profession must take to become a true engineering discipline are described. They are: understanding the nature of expertise, recognizing different ways to get information, encouraging routine practice, expecting professional specializations, and improving the coupling between science and commercial practice.<<ETX>></ETX>","1937-4194","","10.1109/52.60586","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=60586","","Knowledge engineering;Design engineering;Software design;Reliability engineering;Software engineering;Production;Software development management;Programming;Mathematics;Buildings","software engineering","engineering discipline;software engineering;software technology;information processing;economic force;critical applications;development techniques;scientific basis;expertise;routine practice;professional specializations;science;commercial practice","","163","1","16","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Using Modem Design Practices to Upgrade Aging Software Systems","R. N. Britcher; J. J. Craig",IBM; NA,"IEEE Software","11 Sep 2006","1986","3","3","16","24","Modifying 100,000 lines of 20-year-old code, IBM-FSD successfully applied its software engineering principles to modernization of the FAA'S air traffic control system.","1937-4194","","10.1109/MS.1986.233407","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1695537","","Modems;Aging;Software systems;Software maintenance;FAA;Air traffic control;Embedded software;Control systems;Software standards;Computer interfaces","","","","14","1","9","","11 Sep 2006","","","IEEE","IEEE Magazines"
"Organizing Security Patterns","M. Hafiz; P. Adamczyk; R. E. Johnson",University of Illinois; University of Illinois; University of Illinois,"IEEE Software","9 Jul 2007","2007","24","4","52","60","Early software systems communicated in predefined ways, so they were easy to secure. However, the old ways of ensuring software systems' security and reliability are inadequate on the Internet. Although building secure systems is difficult, retrofitting existing systems to introduce security is even harder. For example, sendmail, the most popular mail transfer agent, has been plagued with security vulnerabilities ever since the Morris worm first exploited it in 1988.","1937-4194","","10.1109/MS.2007.114","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4267603","patterns;security;protection","Organizing;Security;Authentication;Books;Catalogs;Web services;Java;Software systems;Internet;Steel","object-oriented methods;security of data","security patterns organization;software systems security;Internet","","60","","7","","9 Jul 2007","","","IEEE","IEEE Magazines"
"Cash cow in the tar pit: reengineering a legacy system","W. S. Adolph","British Columbia Inst. of Technol., Burnaby, BC, Canada","IEEE Software","6 Aug 2002","1996","13","3","41","47","Many old systems are still with us and burden us with baggage, but replacing them, particularly when they are legacy systems, is not as straightforward as it seems. The author imparts some of the lessons learned on a legacy-replacement project.","1937-4194","","10.1109/52.493019","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=493019","","Costs;Risk management;Rail transportation;Software engineering;Manufacturing;Project management;Software systems;Hardware;Software performance;Software tools","systems re-engineering;software development management;software maintenance;business data processing","systems reengineering;legacy system;legacy-replacement project;software development projects;software maintenance;business","","25","","5","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Completing the job interface design","J. Rudolf; C. Waite",NA; NA,"IEEE Software","6 Aug 2002","1992","9","6","11","22","HyperNews, a user-interface management system that lets a user separate application and interface design to link a new interface to an old application with very little programming, is described. Much of a HyperNews interface can be designed without writing any code at all. With direct manipulation, a user can design a graphical user interface simply by creating, moving, and resizing objects on the screen. Experimentation with different interface styles is possible with less effort in HyperNews compared to specification languages and tool kits, and immediate feedback can result in extremely fast development. The ways HyperNews provides communication capabilities among all HyperNews objects (such as control objects, cards, backgrounds, and stacks) and links interfaces to internal applications, which were developed within HyperNews, to external applications, or to existing applications developed without HyperNews are discussed.<<ETX>></ETX>","1937-4194","","10.1109/52.168854","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=168854","","Job design;Graphics;Programming profession;Workstations;Displays;Mice;Graphical user interfaces;Psychology;Runtime;Specification languages","graphical user interfaces;hypermedia;user interface management systems","object creation;object moving;object resizing;job interface design;HyperNews;user-interface management system;direct manipulation;graphical user interface;interface styles;control objects;cards;backgrounds;stacks","","2","4","8","","6 Aug 2002","","","IEEE","IEEE Magazines"
"How Much of the Software Engineering Old Still Remains New?","R. L. Glass",NA,"IEEE Software","17 Jul 2006","2006","23","4","104","104","Oddly enough, many software engineering issues and conflicts that were relevant 20 years ago are still relevant today.","1937-4194","","10.1109/MS.2006.106","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1657949","software engineering;programming","Software engineering;Books;Open source software;Permission;Automatic programming;Sections;Writing;Building materials;Software systems;Australia","","software engineering;programming","","","","","","17 Jul 2006","","","IEEE","IEEE Magazines"
"Usability metrics: tracking interface improvements","J. Nielsen","SunSoft 2550 Garcia Ave MPK 17-305 Mountain View, CA 94043","IEEE Software","19 Jun 2019","1996","13","6","1","2","It is argued that most usability engineering is qualitative in nature: you observe how users use your product - what they have difficulty doing, what they like, and what they hate - then you refine your design accordingly. Given the severe time pressure in most development projects, it's enough to know that something is good or bad. Rarely is it necessary or possible to take the time to find out how good or bad, since if it's good you want to leave it alone and if it is bad you want to change it (if you have time, that is). There are some cases, though, where you do want numbers. The author does not recommend usability metrics for all projects; qualitative methods are usually sufficient to ensure substantial usability improvements. That would mean you won't know bow much better your new design is, but as long as it is not worse than the old one, going with the new one is clearly the better decision. However, organizations that do extensive software development and care about their engineering maturity should collect metrics for at least some of their projects.","1937-4194","","10.1109/MS.1996.8740869","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8740869","","","","","","2","","","","19 Jun 2019","","","IEEE","IEEE Magazines"
"Perspectives [The changing nature of software evolution; The inevitability of evolution]","B. Boehm; K. Beck",University of Southern California; Three Rivers Institute,"IEEE Software","14 Jun 2010","2010","27","4","26","29","Summary form only given. Traditionally, software evolution took place after software development put a system in place. However, the pace of change in technology and competition has changed the nature of software evolution to a continuous process, in which there's no neat boundary between development and evolution. Many traditional software development assumptions and practices haven't recognized this changing nature and increasingly find themselves in deep trouble as a result. Minimizing development costs by adopting numerous off-the-shelf products often leads to unaffordable evolution costs as vendors ship new releases and stop supporting the old ones. Assuming that a single form of evolutionary development covers all situations often leads to unrealistic commitments and dead-end systems as situations change.","1937-4194","","10.1109/MS.2010.103","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5484112","software evolution;software engineering;software change;development","Programming;Costs;Lead;Marine vehicles","software engineering","software evolution;software development;off-the-shelf software products;evolutionary development","","8","","14","","14 Jun 2010","","","IEEE","IEEE Magazines"
"Guest Editor's Introduction: The Promise of Public Software Engineering Data Repositories","B. Cukic",West Virginia University,"IEEE Software","31 Oct 2005","2005","22","6","20","22","Scientific discovery related to software is based on a centuries-old paradigm common to all fields of science: setting up hypotheses and testing them through experiments. Repeatedly confirmed hypotheses become models that can describe and predict real-world phenomena. The best-known models in software engineering describe relationships between development processes, cost and schedule, defects, and numerous software ""-ilities"" such as reliability, maintainability, and availability. But, compared to other disciplines, the science of software is relatively new. It's not surprising that most software models have proponents and opponents among software engineers. This introduction to the special issue discusses the power of modeling, the promise of data repositories, and the workshop devoted to this topic.","1937-4194","","10.1109/MS.2005.153","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1524910","software engineering methodologies;software engineering validation;model checking;process metrics;software science","Software engineering;Predictive models;Software measurement;Databases;Data analysis;Circuit faults;Failure analysis;Testing;Costs;Software maintenance","","software engineering methodologies;software engineering validation;model checking;process metrics;software science","","8","","5","","31 Oct 2005","","","IEEE","IEEE Magazines"
"Novelty in Sameness","H. Erdogmus",National Research Council Canada,"IEEE Software","30 Apr 2007","2007","24","3","5","7","Novelty and sameness can conceal each other. Regardless of how things might appear in hindsight, we risk missing the mark if we indiscriminately insist on seeing new proposals and emerging movements simply as reincarnations of old advice, whether to justify or refute them.","1937-4194","","10.1109/MS.2007.82","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4163015","incremental development;iterative development;phased development;staged development","Prototypes;Feedback loop;Proposals;Councils;Software testing;Software prototyping;Application software;Software systems;Process design;Computer Society","","","","","","","","30 Apr 2007","","","IEEE","IEEE Magazines"
"Designing a World at Your Fingertips: A Look at Mobile User Interfaces","F. Shull",Fraunhofer Center for Experimental Software Engineering,"IEEE Software","10 Aug 2012","2012","29","4","4","7","Smart mobile devices have had a huge impact on the world today with new apps being produced at a prodigious rate. How we got to this point has a lot to do with the ease of use that manufacturers and app developers have achieved, which includes aspects such as quick response time, intuitive interfaces, and well-designed functionality. To explore how this came about, IEEE Software Editor-in-Chief Forrest Shull recently spoke with Ben Shneiderman and Ben Bederson, both of whom are former directors of the University of Maryland's Human-Computer Interaction Lab (HCIL), the oldest center in the US focusing on research in HCI.","1937-4194","","10.1109/MS.2012.81","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6265071","software;engineering;smart phones;mobile devices;apps;functionality;interfaces;hci;human-computer interaction;lab;HCIL","","","","","1","","","","10 Aug 2012","","","IEEE","IEEE Magazines"
"Technology Transfer and the Tech Broker","W. Harrison",NA,"IEEE Software","6 Sep 2006","2006","23","5","5","7","Technology transfer is the process of transferring an idea from its originator to someone who can use it. Typically, this implies the transfer of research developed in academia to industry. While there's no dearth of technologies that academic researchers have available and are anxious to transfer, precious little technology transfer involving academia takes place, at least in the software development community. Why don't we see more tech transfer in our field? What the software community needs is an infrastructure that matches researchers with adopters at a specific point in time and helps them overcome the administrative barriers. One example of a successful technology broker is SERC, a two-decade-old consortium of industrial organizations and universities that facilitates the brokering of technology transfer from academia to industry.","1937-4194","","10.1109/MS.2006.142","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1687852","technology transfer","Technology transfer;Production;Space technology;Time measurement;Packaging;Heart;Vehicles;Software engineering;Engineering profession;Computer Society","","technology transfer","","","","","","6 Sep 2006","","","IEEE","IEEE Magazines"
"Whose bug is it anyway? The battle over handling software flaws","A. Applewhite",NA,"IEEE Software","9 Aug 2004","2004","21","2","94","97","Attacks exploit vulnerabilities in software code. They come in many forms: logic attacks, Trojan horses, worms and viruses, and variants of each. They serve a host of purposes: corporate espionage, white-collar crime, social ""hacktivism,"" terrorism, and notoriety. Greater connectivity, more complex software, and the persistence of older protocols ensure growing vulnerability. End users lose time and money when networks go down. Software vendors lose face and market share. Security researchers struggle to keep pace with the bugs to keep businesses operating safely. The only people with no complaints are the hackers, who reverse-engineer patches released by vendors to exploit the holes. It's enough to make you nostalgic for the old days of the Nimba and Code Red viruses, when attacks came six months after vendors released patches. Blaster attacks began three weeks after release. Security experts anticipate so-called ""zero day"" vulnerabilities, in which attacks precede patches. Although marathon patching sessions have become the norm for harried IT administrators, even top-of-the-line patch management can't keep up with malicious code's growing sophistication.","1937-4194","","10.1109/MS.2004.1270771","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1270771","","Guidelines;Internet;Protocols;Computer bugs;Information security;Communications Committee;Testing;Clothing industry;Standards organizations;Uniform resource locators","Internet;security of data;computer crime","software flaws handling;software code;logic attacks;Trojan horses;worms;viruses;hackers;Internet","","1","","","","9 Aug 2004","","","IEEE","IEEE Magazines"
"Mom, Where Are the Girls?","I. Ozkaya","Software Engineering Institute, Carnegie Mellon, United States","IEEE Software","15 Feb 2021","2021","38","2","3","6","During the fall semester of 2005, I was working hastily on the finishing touches of my Ph.D. dissertation at Carnegie Mellon University. That semester, I also was the teaching assistant for the Methods of Software Development graduate course taught by Dr. Mary Shaw and Dr. Jim Herbsleb. It was a busy time, with the challenges of finishing graduate school; getting ready for a new job; fulfilling responsibilities such as grading and helping students; and parenting my then three-and-a-half-year-old daughter. Methods of Software Development was a demanding course with a lot of reading and reflection assignments. Students took abundant advantage of the office hours. Those meetings always went better if I remembered the students' names, but with that was all going on, my brain did not always comply, so I had a hack. I had printed all of their photos and hung them right above my desk.","1937-4194","","10.1109/MS.2020.3044410","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9354391","","","","","","","","4","IEEE","15 Feb 2021","","","IEEE","IEEE Magazines"
