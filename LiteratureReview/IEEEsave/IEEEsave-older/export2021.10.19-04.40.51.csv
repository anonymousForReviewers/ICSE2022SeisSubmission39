"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Model-Driven Fault Injection in Java Source Code","E. Rodrigues; L. Montecchi; A. Ceccarelli","Universidade Estadual de Campinas,Campinas,SP,Brazil; Universidade Estadual de Campinas,Campinas,SP,Brazil; Universita degli Studi di Firenze,Firenze,Italy","2020 IEEE 31st International Symposium on Software Reliability Engineering (ISSRE)","11 Nov 2020","2020","","","414","425","The injection of software faults in source code requires accurate knowledge of the programming language, both to craft faults and to identify injection locations. As such, fault injection and code mutation tools are typically tailored for a specific language and have limited extensibility. In this paper we present a model-driven approach to craft and inject software faults in source code. While its concrete application is presented for Java, the workflow we propose does not depend on a specific programming language. Following Model-Driven Engineering principles, the faults and the criteria to select injection locations are described using structured, machine-readable specifications based on a domain-specific language. Then, automated transformations craft artifacts based on OCL and Java, which represent the faults to be injected and are able to select the candidate injection locations. Finally, artifacts are executed against the target source code, performing the injection in the desired locations. We devise a supporting tool and exercise the approach injecting 13 different kinds of software faults in the Java source code of six different projects.","2332-6549","978-1-7281-9870-5","10.1109/ISSRE5003.2020.00046","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9251070","Software faults;fault libraries;metamodel;OCL;code patterns;Java.","Knowledge engineering;Java;Tools;Syntactics;Software;Model driven engineering;Software reliability","formal specification;Java;program testing;software fault tolerance;software maintenance;source code (software);specification languages","inject software faults;model-driven engineering principles;machine-readable specifications;domain-specific language;automated transformations craft artifacts;target source code;Java source code;code mutation tools;model-driven fault injection;OCL;Java","","","","45","","11 Nov 2020","","","IEEE","IEEE Conferences"
"QoS-aware Metamorphic Testing: An Elevation Case Study","J. Ayerdi; S. Segura; A. Arrieta; G. Sagardui; M. Arratibel",Mondragon Unibertsitatea; Universidad de Sevilla; Mondragon Unibertsitatea; Mondragon Unibertsitatea; Orona,"2020 IEEE 31st International Symposium on Software Reliability Engineering (ISSRE)","11 Nov 2020","2020","","","104","114","Elevators are among the oldest and most widespread transportation systems, yet their complexity increases rapidly to satisfy customization demands and to meet quality of service requirements. Verification and validation tasks in this context are costly, since they rely on the manual intervention of domain experts at some points of the process. This is mainly due to the difficulty to assess whether the elevators behave as expected in the different test scenarios, the so-called test oracle problem. Metamorphic testing is a thriving testing technique that alleviates the oracle problem by reasoning on the relations among multiple executions of the system under test, the so-called metamorphic relations. In this practical experience paper, we report on the application of metamorphic testing to verify an industrial elevator dispatcher. Together with domain experts from the elevation sector, we defined multiple metamorphic relations that consider domain-specific quality of service measures. Evaluation results with seeded faults show that the approach is effective at detecting faults automatically.","2332-6549","978-1-7281-9870-5","10.1109/ISSRE5003.2020.00019","European Commission; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9251056","Cyber-Physical Systems;Elevators;Metamorphic Testing;Quality of Service","Measurement;Transportation;Quality of service;Elevators;Test pattern generators;Task analysis;Testing","lifts;production engineering computing;program testing;quality of service","QoS-aware metamorphic testing;transportation systems;customization demands;service requirements;validation tasks;test oracle problem;industrial elevator dispatcher;metamorphic relations;domain-specific quality","","3","","37","","11 Nov 2020","","","IEEE","IEEE Conferences"
