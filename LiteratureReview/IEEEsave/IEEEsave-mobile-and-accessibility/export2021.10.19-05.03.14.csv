"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Automated Accessibility Testing of Mobile Apps","M. M. Eler; J. M. Rojas; Y. Ge; G. Fraser","Univ. of Sao Paulo, Sao Paulo, Brazil; Univ. of Leicester, Leicester, UK; Univ. of Sheffield, Sheffield, UK; Univ. of Passau, Passau, Germany","2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST)","28 May 2018","2018","","","116","126","It is important to make mobile apps accessible, so as not to exclude users with common disabilities such as blindness, low vision, or color blindness. Even when developers are aware of these accessibility needs, the lack of tool support makes the development and assessment of accessible apps challenging. Some accessibility properties can be checked statically, but user interface widgets are often created dynamically and are not amenable to static checking. Some accessibility checking frameworks analyze accessibility properties at runtime, but have to rely on existing thorough test suites. In this paper, we introduce the idea of using automated test generation to explore the accessibility of mobile apps. We present the MATE tool (Mobile Accessibility Testing), which automatically explores apps while applying different checks for accessibility issues related to visual impairment. For each issue, MATE generates a detailed report that supports the developer in fixing the issue. Experiments on a sample of 73 apps demonstrate that MATE detects more basic accessibility problems than static analysis, and many additional types of accessibility problems that cannot be detected statically at all. Comparison with existing accessibility testing frameworks demonstrates that the independence of an existing test suite leads to the identification of many more accessibility problems. Even when enabling Android's assistive features like contrast enhancement, MATE can still find many accessibility issues.","","978-1-5386-5012-7","10.1109/ICST.2018.00021","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8367041","accessibility;test generation;automated testing;software testing;mobile apps","Testing;Tools;Androids;Humanoid robots;Google;Guidelines;Smart phones","mobile computing;program diagnostics;program testing;smart phones;user interfaces","test suite;mobile apps;Mobile Accessibility Testing;accessibility testing frameworks;static analysis;MATE tool;automated test generation;accessibility checking frameworks;static checking;user interface widgets;accessibility properties","","9","","43","","28 May 2018","","","IEEE","IEEE Conferences"
